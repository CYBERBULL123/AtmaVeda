import clientPromise from '../../lib/mongodb';
import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { part, language } = req.body;
  if (!part || !language) {
    return res.status(400).json({ error: 'Missing part or language parameter' });
  }

  try {
    const client = await clientPromise;
    const db = client.db(); // defaults to DB name in your URI
    const cacheCollection = db.collection('Atmaveda'); // matches your MongoDB collection name

    // Check for existing cached response
    const cached = await cacheCollection.findOne({ part, language });
    if (cached) {
      return res.status(200).json({ content: cached.content, cached: true });
    }

    // Advanced prompt construction
    let prompt = `Assume the role of an authoritative Vedic scholar with deep academic expertise. Provide a comprehensive and well-structured explanation of "${part}" that includes the following sections:

ЁЯФ╕ **Sanskrit Verse & Transliteration:**  
Present a carefully chosen Sanskrit verse along with its precise transliteration.

ЁЯФ╕ **Translation & In-Depth Interpretation:**  
Offer a full English translation along with a detailed interpretation of the verse.

ЁЯФ╕ **Philosophical Significance:**  
Explain the underlying philosophical concepts and their relevance to modern thought.

ЁЯФ╕ **Practical Applications:**  
Describe how these teachings can be applied in daily life, supported by practical examples.

ЁЯФ╕ **Mythological & Historical Context:**  
Include relevant mythological stories or historical anecdotes to provide context.

Use internal chain-of-thought (CoT) and tree-of-thought (ToT) reasoning, but **do not reveal those processes** in the output. Return clean advanced Markdown with headers and emojis.`;

    if (language === 'hi') {
      prompt = `рдПрдХ рдкреНрд░рдмреБрджреНрдз рдФрд░ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╡реИрджрд┐рдХ рд╡рд┐рджреНрд╡рд╛рди рдХреА рднреВрдорд┐рдХрд╛ рдирд┐рднрд╛рдПрдВ, рдФрд░ "${part}" рдХрд╛ рдПрдХ рд╡рд┐рд╕реНрддреГрдд рдПрд╡рдВ рд╕реБрд╡реНрдпрд╡рд╕реНрдерд┐рдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреНрд░рджрд╛рди рдХрд░реЗрдВ, рдЬрд┐рд╕рдореЗрдВ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЕрдиреБрднрд╛рдЧ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ:

ЁЯФ╕ **рд╕рдВрд╕реНрдХреГрдд рд╢реНрд▓реЛрдХ рдПрд╡рдВ рдЯреНрд░рд╛рдВрд╕рд▓рд┐рдЯрд░реЗрд╢рди:**  
рдЙрдкрдпреБрдХреНрдд рд╕рдВрд╕реНрдХреГрдд рд╢реНрд▓реЛрдХ рдФрд░ рдЙрд╕рдХрд╛ рд╕рдЯреАрдХ рдЯреНрд░рд╛рдВрд╕рд▓рд┐рдЯрд░реЗрд╢рди рдкреНрд░рд╕реНрддреБрдд рдХрд░реЗрдВред

ЁЯФ╕ **рдЕрдиреБрд╡рд╛рдж рдПрд╡рдВ рдЧрд╣рди рд╡реНрдпрд╛рдЦреНрдпрд╛:**  
рд╢реНрд▓реЛрдХ рдХрд╛ рдкреВрд░реНрдг рдЕрдиреБрд╡рд╛рдж рдФрд░ рдЙрд╕рдХреА рдЧрд╣рди рд╡реНрдпрд╛рдЦреНрдпрд╛ рджреЗрдВред

ЁЯФ╕ **рджрд╛рд░реНрд╢рдирд┐рдХ рдорд╣рддреНрд╡:**  
рдЖрдВрддрд░рд┐рдХ рджрд╛рд░реНрд╢рдирд┐рдХ рд╕рд┐рджреНрдзрд╛рдВрддреЛрдВ рдФрд░ рдЙрдирдХреЗ рдЖрдзреБрдирд┐рдХ рдЬреАрд╡рди рдореЗрдВ рдкреНрд░рднрд╛рд╡ рдХреА рд╡реНрдпрд╛рдЦреНрдпрд╛ рдХрд░реЗрдВред

ЁЯФ╕ **рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЙрдкрдпреЛрдЧ:**  
рдЗрди рд╢рд┐рдХреНрд╖рд╛рдУрдВ рдХреЛ рд░реЛрдЬрдорд░реНрд░рд╛ рдХреЗ рдЬреАрд╡рди рдореЗрдВ рдХреИрд╕реЗ рдЕрдкрдирд╛рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ, рдЙрд╕рдХреЗ рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рдЙрджрд╛рд╣рд░рдгреЛрдВ рд╕рд╣рд┐рдд рдЪрд░реНрдЪрд╛ рдХрд░реЗрдВред

ЁЯФ╕ **рдкреМрд░рд╛рдгрд┐рдХ рдПрд╡рдВ рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рд╕рдВрджрд░реНрдн:**  
рд╕рдВрдмрдВрдзрд┐рдд рдкреМрд░рд╛рдгрд┐рдХ рдХрдерд╛рдПрдБ рдпрд╛ рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдкреНрд░рд╕рдВрдЧ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВред

рдЕрдкрдиреЗ рдЖрдВрддрд░рд┐рдХ рд╡рд┐рдЪрд╛рд░ (рдЪреЗрди-рдСрдл-рдереЙрдЯ рдФрд░ рдЯреНрд░реА-рдСрдл-рдереЙрдЯ) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдкрд░ рдЕрдВрддрд┐рдо рдЖрдЙрдЯрдкреБрдЯ рдореЗрдВ рдЙрд╕реЗ рди рджрд┐рдЦрд╛рдПрдВред Markdown рдореЗрдВ рдЖрдХрд░реНрд╖рдХ рдФрд░ рд╕реБрд╡реНрдпрд╡рд╕реНрдерд┐рдд рдЙрддреНрддрд░ рджреЗрдВред`;
    }

    // Generate content
    const result = await model.generateContent(prompt);
    const responseText = await result.response.text();

    // Cache result in MongoDB
    await cacheCollection.updateOne(
      { part, language },
      { $set: { content: responseText, createdAt: new Date() } },
      { upsert: true }
    );

    return res.status(200).json({ content: responseText, cached: false });

  } catch (error) {
    console.error("MongoDB or AI Error:", error);
    return res.status(500).json({ error: "Failed to connect with divine wisdom. Please try again later." });
  }
}
